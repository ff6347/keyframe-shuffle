var meta = new Object();meta.settings = {    /*      0 = per layer    1 = per prop    2 per key     */    shufflescope : 2,    /*    0 = both    1= pos    2 = neg    */    keytimedir : 0,    range: 0};shuffle_keys (meta);function shuffle_keys(meta){    app.beginUndoGroup("shuffle keys");meta.settings.range = parseFloat(prompt("Enter a range in seconds to shuffle", "0.5",""));var curComp = app.project.activeItem;//~ var fdur  = curComp.frameDuration;//~ var shuffle = shuffle_val / fdur;var selLayers =  curComp.selectedLayers;// var shuffle = Math.random() -1; // by half second before and after    var data = new Array();for (var i = 0; i < selLayers.length;i++){        var lyr = selLayers[i];        // theLayers.push(lyr);        var props = new Array();        for(var j = 0; j < lyr.selectedProperties.length; j++){             var prop = lyr.selectedProperties[j];            // layer_sel_props.push(prop);            var propkeys = new Array();            // var keys;            //             for (var k = 0; k < prop.selectedKeys.length;k++){                var keyTime = prop.keyTime(prop.selectedKeys[k]);                var keyValue = prop.keyValue(prop.selectedKeys[k]);                var keyIndex = prop.selectedKeys[k];                propkeys.push({time:keyTime,value:keyValue,idx: keyIndex});             };// close K loop             props.push({property: prop, keydata: propkeys});        }; // close J loop        data.push({layer:lyr,properties: props});    }; // close I loop// alert(data[0].layer.name);// for(var l = 0; l < data.length;l++){    // alert(data[l].properties[0].property);    for(var m = 0; m < data[l].properties.length; m++){         // alert(data[l].properties[m].property.name);         for(var n = data[l].properties[m].keydata.length -1; n >= 0; n--){            // alert(data[l].properties[m].keydata[n]);                         var idx = data[l].properties[m].keydata[n].idx;             // alert(idx);             data[l].properties[m].property.removeKey(idx);         }    }}var shuffle = 0;for(var o = 0; o < data.length; o++){    if(meta.settings.shufflescope == 0){    shuffle = calc_shuffle(meta) ;    }    for(var p = 0; p < data[o].properties.length; p ++){     if(meta.settings.shufflescope == 1){    shuffle = calc_shuffle(meta);    }        for(var q = 0; q < data[o].properties[p].keydata.length; q++){            if(meta.settings.shufflescope == 2){            shuffle = calc_shuffle(meta) ;            }                        var new_time = data[o].properties[p].keydata[q].time + shuffle;                        var new_value = data[o].properties[p].keydata[q].value;            var prop = data[o].properties[p].property;            prop.setValueAtTime(new_time, new_value);        }    }}    app.endUndoGroup();        }function calc_shuffle(meta){    var shuff = 0;    var range = meta.settings.range;    if(meta.settings.keytimedir == 0){    shuff = (Math.random() * (range)) - (range);    }else if(meta.settings.keytimedir == 1){        shuff = Math.random() * range;    }else if(meta.settings.keytimedir == 2){        shuff = (Math.random() * range) * -1;    }return shuff;}